using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Linq.Dynamic.Core;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Application.Services;
using Volo.Abp.Domain.Repositories;
using MyPlugIn.Permissions;
using MyPlugIn.Contents;
using MiniExcelLibs;
using Volo.Abp.Content;
using Volo.Abp.Authorization;
using Volo.Abp.Caching;
using Microsoft.Extensions.Caching.Distributed;
using MyPlugIn.Shared;
using Volo.Abp.AspNetCore.Mvc.UI.Theming;

namespace MyPlugIn.Contents
{
    public class ContentsAppService : ContentsAppServiceBase, IContentsAppService
    {
        //<suite-custom-code-autogenerated>
        public ContentsAppService(IContentRepository contentRepository, ContentManager contentManager, IDistributedCache<ContentExcelDownloadTokenCacheItem, string> excelDownloadTokenCache)
            : base(contentRepository, contentManager, excelDownloadTokenCache)
        {
        }

        public virtual async Task<PagedResultDto<ContentDto>> GetAll(GetContentsInput input)
        {
            var totalCount = await _contentRepository.GetCountAsync(input.FilterText, input.Name, input.Value);
            var items = await _contentRepository.GetListAsync(input.FilterText, input.Name, input.Value, input.Sorting, input.MaxResultCount, input.SkipCount);

            return new PagedResultDto<ContentDto>
            {
                TotalCount = totalCount,
                Items = ObjectMapper.Map<List<Content>, List<ContentDto>>(items)
            };
        }

        public virtual async Task<ContentDto> GetCMSContent(Guid id)
        {
            return ObjectMapper.Map<Content, ContentDto>(await _contentRepository.GetAsync(id));
        }

        public virtual async Task<ContentDto> InsertOrUpdateCMSContent(ContentCreateUpdateDto contentCreateUpdateDto)
        {

            if(contentCreateUpdateDto.Id == null || contentCreateUpdateDto.Id == Guid.Empty)
            {

                var content = await _contentManager.CreateAsync(
                             contentCreateUpdateDto.Name, contentCreateUpdateDto.Value
                             );

                return ObjectMapper.Map<Content, ContentDto>(content);
            }
            else
            {
                var content = await _contentManager.UpdateAsync(
         (Guid)contentCreateUpdateDto.Id,
         contentCreateUpdateDto.Name, contentCreateUpdateDto.Value
         );

                return ObjectMapper.Map<Content, ContentDto>(content);
            }
    
        }

    
        //</suite-custom-code-autogenerated>

        //Write your custom code...
    }
}